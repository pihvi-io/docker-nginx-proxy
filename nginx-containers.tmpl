{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ define "upstream" }}
        {{ if .Address }}
            {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
            {{ if and .Container.Node.ID .Address.HostPort }}
                # {{ .Container.Node.Name }}/{{ .Container.Name }}
                server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
            {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
            {{ else if .Address.IP }}
                # {{ .Container.Name }}
                server {{ .Address.IP }}:{{ .Address.Port }};
            {{ else }}
                # Nginx proxy cant access this network, use error server instead
                server 127.0.0.1:10003;
            {{ end }}
        {{ end }}
{{ end }}

{{ end }}

{{ $enable_ipv6 := eq (or ($.Env.ENABLE_IPV6) "") "true" }}
server {
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	listen 80;
	{{ if $enable_ipv6 }}
	listen [::]:80;
	{{ end }}
	access_log /dev/stderr vhost;
	return 503;
}

server {
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	listen 443 ssl http2;
	{{ if $enable_ipv6 }}
	listen [::]:443 ssl http2;
	{{ end }}
	access_log /dev/stderr vhost;
	return 503;

	ssl_session_tickets off;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
{{ $is_regexp := hasPrefix "~" $host }}
{{ $upstream_name := when $is_regexp (sha1 $host) $host }}
# {{ $host }}
upstream {{ $host }} {
{{ range $container := $containers }}
        {{ $addrLen := len $container.Addresses }}
        {{/* If only 1 port exposed, use that */}}
        {{ if eq $addrLen 1 }}
            {{ $address := index $container.Addresses 0 }}
            {{ template "upstream" (dict "Container" $container "Address" $address) }}
        {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
        {{ else }}
            {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
            {{ $address := where $container.Addresses "Port" $port | first }}
            {{ template "upstream" (dict "Container" $container "Address" $address) }}
        {{ end }}
{{ end }}
}

{{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
{{ $default_server := index (dict $host "" $default_host "default_server") $host }}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }}

server {
	server_name {{ $host }};
	listen 80 {{ $default_server }};
	{{ if $enable_ipv6 }}
	listen [::]:80 {{ $default_server }};
	{{ end }}
	access_log /dev/stderr vhost;
	return 301 https://$host$request_uri;
}

server {
	server_name {{ $host }};
	listen 443 ssl http2 {{ $default_server }};
	{{ if $enable_ipv6 }}
	listen [::]:443 ssl http2 {{ $default_server }};
	{{ end }}
	access_log /dev/stderr vhost;

	include ssl_settings.conf

	location / {
		{{ if eq $proto "uwsgi" }}
		include uwsgi_params;
		uwsgi_pass {{ trim $proto }}://{{ trim $upstream_name }};
		{{ else }}
		proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
		{{ end }}
		{{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
		auth_basic	"Restricted {{ $host }}";
		auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
		{{ end }}
                {{ if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
                include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
                {{ else if (exists "/etc/nginx/vhost.d/default_location") }}
                include /etc/nginx/vhost.d/default_location;
                {{ end }}
	}
}

{{ end }}